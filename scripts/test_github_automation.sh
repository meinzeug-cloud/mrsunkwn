#!/bin/bash

# Test script for GitHub Issues Automation
# This script tests the GitHub API connectivity validation without running the full agent

echo "üß™ Testing GitHub Issues Automation..."

# Set up environment variables
export GITHUB_TOKEN=${GITHUB_TOKEN:-"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"}
export REPO_OWNER=${REPO_OWNER:-"meinzeug"}
export REPO_NAME=${REPO_NAME:-"mrsunkwn"}

# Function to test GitHub API connectivity
test_github_api() {
    echo "üîç Testing GitHub API connectivity..."
    
    # Test GitHub API connection
    github_test_response=$(curl -s -w "%{http_code}" -o /tmp/github_test.json \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME" 2>/dev/null)
    
    echo "üìä Response Code: $github_test_response"
    
    if [ -f /tmp/github_test.json ]; then
        echo "üìÑ Response Content:"
        cat /tmp/github_test.json | head -n 10
        echo ""
        rm -f /tmp/github_test.json
    fi
    
    if [ "$github_test_response" = "200" ]; then
        echo "‚úÖ GitHub API is accessible!"
        echo "‚úÖ Repository access confirmed: $REPO_OWNER/$REPO_NAME"
        return 0
    else
        echo "‚ùå GitHub API is not accessible!"
        echo "‚ùå Response code: $github_test_response"
        return 1
    fi
}

# Function to test issue creation (dry run)
test_issue_creation() {
    echo "üîç Testing issue creation (dry run)..."
    
    issue_data='{
        "title": "üß™ Test Issue - GitHub Automation Validation",
        "body": "This is a test issue created to validate GitHub Issues automation.\n\nGenerated by: Mrs-Unkwn Test Script\nTimestamp: '"$(date -Iseconds)"'",
        "labels": ["test", "automation", "validation"]
    }'
    
    # Test issue creation (but don't actually create it by using wrong endpoint)
    curl_test_response=$(curl -s -w "%{http_code}" -o /tmp/issue_test.json \
        -X POST \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        -H "User-Agent: Mrs-Unkwn-Test/1.0" \
        -d "$issue_data" \
        "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/test-endpoint" 2>/dev/null)
    
    echo "üìä Test Response Code: $curl_test_response"
    
    if [ -f /tmp/issue_test.json ]; then
        echo "üìÑ Test Response:"
        cat /tmp/issue_test.json
        echo ""
        rm -f /tmp/issue_test.json
    fi
    
    # 404 is expected for test endpoint, anything else indicates auth/network issues
    if [ "$curl_test_response" = "404" ]; then
        echo "‚úÖ Issue creation test passed (authentication works)"
        return 0
    else
        echo "‚ùå Issue creation test failed"
        echo "‚ùå Expected 404 for test endpoint, got: $curl_test_response"
        return 1
    fi
}

# Function to validate environment
validate_environment() {
    echo "üîç Validating environment variables..."
    
    if [ -z "$GITHUB_TOKEN" ]; then
        echo "‚ùå GITHUB_TOKEN is not set"
        return 1
    fi
    
    if [ -z "$REPO_OWNER" ]; then
        echo "‚ùå REPO_OWNER is not set"
        return 1
    fi
    
    if [ -z "$REPO_NAME" ]; then
        echo "‚ùå REPO_NAME is not set"
        return 1
    fi
    
    # Check for dummy values
    if [ "$GITHUB_TOKEN" = "dummy_token" ] || [ "$GITHUB_TOKEN" = "your_token_here" ]; then
        echo "‚ùå GITHUB_TOKEN appears to be a dummy value"
        return 1
    fi
    
    echo "‚úÖ Environment variables are set correctly"
    echo "   REPO_OWNER: $REPO_OWNER"
    echo "   REPO_NAME: $REPO_NAME"
    echo "   GITHUB_TOKEN: ${GITHUB_TOKEN:0:20}..." # Show first 20 chars only
    return 0
}

# Main test execution
main() {
    echo "=================================="
    echo "GitHub Issues Automation Test"
    echo "=================================="
    echo ""
    
    # Test 1: Environment validation
    echo "Test 1: Environment Validation"
    echo "------------------------------"
    if ! validate_environment; then
        echo "‚ùå Environment validation failed!"
        exit 1
    fi
    echo ""
    
    # Test 2: GitHub API connectivity
    echo "Test 2: GitHub API Connectivity"
    echo "-------------------------------"
    if test_github_api; then
        api_available=true
    else
        api_available=false
    fi
    echo ""
    
    # Test 3: Issue creation capabilities
    if [ "$api_available" = true ]; then
        echo "Test 3: Issue Creation Capabilities"
        echo "-----------------------------------"
        if test_issue_creation; then
            issue_creation_works=true
        else
            issue_creation_works=false
        fi
        echo ""
    else
        echo "Test 3: Skipped (API not available)"
        echo "-----------------------------------"
        issue_creation_works=false
        echo ""
    fi
    
    # Summary
    echo "Summary"
    echo "======="
    echo "Environment Variables: ‚úÖ Valid"
    
    if [ "$api_available" = true ]; then
        echo "GitHub API Access: ‚úÖ Available"
    else
        echo "GitHub API Access: ‚ùå Not Available"
    fi
    
    if [ "$issue_creation_works" = true ]; then
        echo "Issue Creation: ‚úÖ Functional"
    else
        echo "Issue Creation: ‚ùå Not Functional"
    fi
    
    echo ""
    
    # Recommendations
    echo "Recommendations"
    echo "==============="
    
    if [ "$api_available" = true ] && [ "$issue_creation_works" = true ]; then
        echo "‚úÖ GitHub Issues automation should work correctly!"
        echo "‚úÖ You can run the agent in normal mode:"
        echo "   ./scripts/start_agent.sh"
    elif [ "$api_available" = false ]; then
        echo "‚ùå GitHub API is not accessible."
        echo "üí° You can run the agent in test mode:"
        echo "   export TEST_MODE=true"
        echo "   ./scripts/start_agent.sh"
        echo ""
        echo "üí° To fix GitHub API access, check:"
        echo "   - Network connectivity to api.github.com"
        echo "   - GitHub token validity and permissions"
        echo "   - Proxy/firewall settings"
    else
        echo "‚ö†Ô∏è GitHub API is accessible but issue creation may not work."
        echo "üí° Check token permissions (needs 'repo' scope)"
        echo "üí° Alternatively, run in test mode:"
        echo "   export TEST_MODE=true"
        echo "   ./scripts/start_agent.sh"
    fi
    
    echo ""
    echo "üß™ Test completed!"
}

# Run main function
main